# THIS FILE IS AUTO-GENERATED by vibe-validate generate-workflow
# DO NOT EDIT MANUALLY - Edit vibe-validate.config.yaml instead
# Regenerate with: npx vibe-validate generate-workflow
#
# Source of truth: vibe-validate.config.yaml
name: Validation Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  validate:
    name: Run vibe-validate validation
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: "9"
      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
      - name: Install dependencies
        run: pnpm install
      - name: Build packages
        run: pnpm -r build
      - name: Run validation (Unix)
        if: runner.os != 'Windows'
        run: node packages/cli/dist/bin.js validate --yaml --verbose
          1>validation-result.yaml || true
      - name: Run validation (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: >-
          node packages/cli/dist/bin.js validate --yaml --verbose
          1>validation-result.yaml

          $exitCode = $LASTEXITCODE

          exit 0  # Always succeed to allow result display
      - name: Display validation result (Unix)
        if: always() && runner.os != 'Windows'
        run: >-
          echo "=========================================="

          echo "VALIDATION RESULT"

          echo "=========================================="

          cat validation-result.yaml 2>/dev/null || echo "❌ Could not read
          validation result"

          echo "=========================================="
      - name: Display validation result (Windows)
        if: always() && runner.os == 'Windows'
        shell: powershell
        run: >-
          Write-Host '=========================================='

          Write-Host 'VALIDATION RESULT'

          Write-Host '=========================================='

          if (Test-Path validation-result.yaml) { Get-Content
          validation-result.yaml } else { Write-Host 'Could not read validation
          result' }

          Write-Host '=========================================='
      - name: Check validation result (Unix)
        if: always() && runner.os != 'Windows'
        run: 'grep -q "passed: true" validation-result.yaml || exit 1'
      - name: Check validation result (Windows)
        if: always() && runner.os == 'Windows'
        shell: powershell
        run: 'if (!(Select-String -Path validation-result.yaml -Pattern "passed: true"
          -Quiet)) { exit 1 }'
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        node:
          - "22"
          - "24"
  all-validation-passed:
    name: All Validation Passed
    runs-on: ubuntu-latest
    needs:
      - validate
    if: always()
    steps:
      - name: Check all validation jobs
        run: |-
          if [ "${{ needs.validate.result }}" != "success" ]; then
                      echo "❌ Some validation checks failed"
                      exit 1
                    fi
                    echo "✅ All validation checks passed!"
